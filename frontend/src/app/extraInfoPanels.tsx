"use client";

import { useState, useContext } from "react";
import { Formik, Form, Field } from "formik";
import "./globals.css";
import {
   Action,
   Attribute,
   ATTRIBUTE_LIST,
   Character,
   SKILL_LIST,
} from "./types";
import { Button } from "../components/ui/button";
import {
   saveActionToIndexedDB,
   saveCharacterToIndexedDB,
} from "../lib/indexedDB";
import { Divider } from "@/components/ui/Divider";
import { AppContext } from "./context";
import InputSmartNumber from "@/components/ui/inputSmartNumber";
import { copyCharacter } from "lib/utils";
import SkillRow from "./skillRow";

export default function ExtraInfoPanels() {
   const context = useContext(AppContext);
   if (!context) {
      throw new Error("AppContext must be used within a Provider");
   }

   const { setActions, character, setCharacter } = context;
   const [activeTab, setActiveTab] = useState<"addAction" | "attributes">(
      "addAction"
   );

   const handleSubmit = async (values: Action, { resetForm }: any) => {
      try {
         const id = await saveActionToIndexedDB(values);
         setActions((prev) => [...prev, values]);
         resetForm();
      } catch (error) {
         console.error("Error saving action:", error);
      }
   };

   const handleAttributeChange = async (
      key: keyof Character["attributes"],
      value: number
   ) => {
      if (!character) return;
      const newAttribute = new Attribute(value);
      const updatedCharacter = copyCharacter(character);
      updatedCharacter.attributes[key] = newAttribute;
      setCharacter(updatedCharacter);
      saveCharacterToIndexedDB(updatedCharacter);
   };

   type FormValues = Omit<Action, "triggers" | "id" | "characterID"> & {
      triggers: string;
   };

   return (
      <div className="flex flex-1 flex-col p-8">
         {/* Tabs */}
         <div className="flex gap-4 mb-4">
            <button
               className={`p-2 rounded ${
                  activeTab === "addAction"
                     ? "bg-contrast-2 text-white"
                     : "bg-contrast-3 text-gray-400"
               }`}
               onClick={() => setActiveTab("addAction")}
            >
               Add Action
            </button>
            <button
               className={`p-2 rounded ${
                  activeTab === "attributes"
                     ? "bg-contrast-2 text-white"
                     : "bg-contrast-3 text-gray-400"
               }`}
               onClick={() => setActiveTab("attributes")}
            >
               Attributes & Skills
            </button>
         </div>

         {/* Tab Content */}
         {activeTab === "addAction" ? (
            <div className="flex-1 flex bg-contrast-1 justify-center items-center">
               <Formik<FormValues>
                  initialValues={{
                     title: "",
                     description: "",
                     time: undefined,
                     attack: undefined,
                     triggers: "",
                  }}
                  onSubmit={(values, actions) => {
                     if (!character) {
                        console.error("Character not found");
                        return;
                     }

                     const formattedValues: Action = {
                        ...values,
                        id: 0, // ID will be generated by IndexedDB
                        characterID: character.id,
                        triggers: values.triggers
                           .split(",")
                           .map((t) => t.trim()),
                     };
                     handleSubmit(formattedValues, actions);
                  }}
               >
                  {() => (
                     <Form className="bg-contrast-2 p-6 rounded shadow-md w-full max-w-md">
                        <Divider />
                        <h2 className="text-xl font-bold mb-4">
                           Add New Action
                        </h2>
                        <div className="mb-4">
                           <label className="block mb-1" htmlFor="title">
                              Title
                           </label>
                           <Field
                              id="title"
                              name="title"
                              placeholder="Action Title"
                              className="w-full p-2 rounded bg-contrast-3 text-white"
                           />
                        </div>
                        <div className="mb-4">
                           <label className="block mb-1" htmlFor="description">
                              Description
                           </label>
                           <Field
                              id="description"
                              name="description"
                              as="textarea"
                              placeholder="Action Description"
                              className="w-full p-2 rounded bg-contrast-3 text-white"
                           />
                        </div>
                        <div className="mb-4">
                           <label className="block mb-1" htmlFor="time">
                              Time
                           </label>
                           <Field
                              id="time"
                              name="time"
                              placeholder="e.g., Action, Bonus Action"
                              className="w-full p-2 rounded bg-contrast-3 text-white"
                           />
                        </div>
                        <div className="mb-4">
                           <label className="block mb-1" htmlFor="attack">
                              Attack
                           </label>
                           <Field
                              id="attack"
                              name="attack"
                              placeholder="e.g., 1d8 slashing"
                              className="w-full p-2 rounded bg-contrast-3 text-white"
                           />
                        </div>
                        <div className="mb-4">
                           <label className="block mb-1" htmlFor="triggers">
                              Triggers (comma-separated)
                           </label>
                           <Field
                              id="triggers"
                              name="triggers"
                              placeholder="e.g., Enemy casts spell, Bonus Action"
                              className="w-full p-2 rounded bg-contrast-3 text-white"
                           />
                        </div>
                        <Button type="submit" className="w-full">
                           Add Action
                        </Button>
                     </Form>
                  )}
               </Formik>
            </div>
         ) : (
            <div className="flex flex-col gap-8">
               {/* Attributes Section */}
               <div className="grid grid-cols-6 gap-4">
                  {ATTRIBUTE_LIST.map((attribute) => (
                     <div
                        key={attribute}
                        className="flex flex-col items-center"
                     >
                        <div className="text-sm font-bold mb-1">
                           {attribute.toUpperCase()}
                        </div>
                        <div className="bg-contrast-2 text-white w-16 h-16 flex items-center justify-center rounded">
                           {character?.attributes[
                              attribute
                           ]?.getModifierString() ?? 10}
                        </div>
                        <div className="bg-contrast-3 relative top-[-15px]">
                           <InputSmartNumber
                              value={
                                 character?.attributes[attribute]?.amount ?? 10
                              }
                              onChange={(value) =>
                                 handleAttributeChange(
                                    attribute,
                                    Number(value.target.value)
                                 )
                              }
                              className="w-9 text-contrast-10 text-center bg-contrast-3 opacity-100 rounded px-0"
                           />
                        </div>
                     </div>
                  ))}
               </div>

               <Divider />

               {/* Skills Section */}
               <div className="grid grid-cols-3 gap-4">
                  {SKILL_LIST.map((skill) => (
                     <SkillRow key={skill} skillKey={skill} />
                  ))}
               </div>
            </div>
         )}
      </div>
   );
}
