"use client";

import { useState, useEffect, useContext } from "react";
import { Formik, Form, Field } from "formik";
import "./globals.css";
import { Action, Character } from "./types";
import { Button } from "../components/ui/button";
import {
   saveActionToIndexedDB,
   getActionsFromIndexedDB,
   saveCharacterToIndexedDB,
   getCharacterFromIndexedDB,
} from "../lib/indexedDB";
import { Divider } from "@/components/ui/Divider";
import { AppContext } from "./context";

export default function ExtraInfoPanels() {
   const context = useContext(AppContext);
   if (!context) {
      throw new Error("AppContext must be used within a Provider");
   }

   const { setActions, character } = context;

   const handleSubmit = async (values: Action, { resetForm }: any) => {
      try {
         const id = await saveActionToIndexedDB(values);
         setActions((prev) => [...prev, values]);
         resetForm();
      } catch (error) {
         console.error("Error saving action:", error);
      }
   };

   type FormValues = Omit<Action, "triggers" | "id" | "characterID"> & {
      triggers: string;
   };

   return (
      <div className="flex flex-1 p-8">
         <div className="flex-1 flex bg-contrast-1 justify-center items-center">
            <Formik<FormValues>
               initialValues={{
                  title: "",
                  description: "",
                  time: undefined,
                  attack: undefined,
                  triggers: "",
               }}
               onSubmit={(values, actions) => {
                  if (!character) {
                     console.error("Character not found");
                     return;
                  }

                  const formattedValues: Action = {
                     ...values,
                     id: 0, // ID will be generated by IndexedDB
                     characterID: character.id,
                     triggers: values.triggers.split(",").map((t) => t.trim()),
                  };
                  handleSubmit(formattedValues, actions);
               }}
            >
               {() => (
                  <Form className="bg-contrast-2 p-6 rounded shadow-md w-full max-w-md">
                     <Divider />
                     <h2 className="text-xl font-bold mb-4">Add New Action</h2>
                     <div className="mb-4">
                        <label className="block mb-1" htmlFor="title">
                           Title
                        </label>
                        <Field
                           id="title"
                           name="title"
                           placeholder="Action Title"
                           className="w-full p-2 rounded bg-contrast-3 text-white"
                        />
                     </div>
                     <div className="mb-4">
                        <label className="block mb-1" htmlFor="description">
                           Description
                        </label>
                        <Field
                           id="description"
                           name="description"
                           as="textarea"
                           placeholder="Action Description"
                           className="w-full p-2 rounded bg-contrast-3 text-white"
                        />
                     </div>
                     <div className="mb-4">
                        <label className="block mb-1" htmlFor="time">
                           Time
                        </label>
                        <Field
                           id="time"
                           name="time"
                           placeholder="e.g., Action, Bonus Action"
                           className="w-full p-2 rounded bg-contrast-3 text-white"
                        />
                     </div>
                     <div className="mb-4">
                        <label className="block mb-1" htmlFor="attack">
                           Attack
                        </label>
                        <Field
                           id="attack"
                           name="attack"
                           placeholder="e.g., 1d8 slashing"
                           className="w-full p-2 rounded bg-contrast-3 text-white"
                        />
                     </div>
                     <div className="mb-4">
                        <label className="block mb-1" htmlFor="triggers">
                           Triggers (comma-separated)
                        </label>
                        <Field
                           id="triggers"
                           name="triggers"
                           placeholder="e.g., Enemy casts spell, Bonus Action"
                           className="w-full p-2 rounded bg-contrast-3 text-white"
                        />
                     </div>
                     <Button type="submit" className="w-full">
                        Add Action
                     </Button>
                  </Form>
               )}
            </Formik>
         </div>
      </div>
   );
}
